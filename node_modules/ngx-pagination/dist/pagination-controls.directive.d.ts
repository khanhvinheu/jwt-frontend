import { ChangeDetectorRef, EventEmitter } from '@angular/core';
import { PaginationService } from './pagination.service';
import * as ɵngcc0 from '@angular/core';
export interface Page {
    label: string;
    value: any;
}
/**
 * This directive is what powers all pagination controls components, including the default one.
 * It exposes an API which is hooked up to the PaginationService to keep the PaginatePipe in sync
 * with the pagination controls.
 */
export declare class PaginationControlsDirective {
    private service;
    private changeDetectorRef;
    id: string;
    maxSize: number;
    pageChange: EventEmitter<number>;
    pages: Page[];
    private changeSub;
    constructor(service: PaginationService, changeDetectorRef: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnChanges(changes: any): void;
    ngOnDestroy(): void;
    /**
     * Go to the previous page
     */
    previous(): void;
    /**
     * Go to the next page
     */
    next(): void;
    /**
     * Returns true if current page is first page
     */
    isFirstPage(): boolean;
    /**
     * Returns true if current page is last page
     */
    isLastPage(): boolean;
    /**
     * Set the current page number.
     */
    setCurrent(page: number): void;
    /**
     * Get the current page number.
     */
    getCurrent(): number;
    /**
     * Returns the last page number
     */
    getLastPage(): number;
    getTotalItems(): number;
    private checkValidId();
    /**
     * Updates the page links and checks that the current page is valid. Should run whenever the
     * PaginationService.change stream emits a value matching the current ID, or when any of the
     * input values changes.
     */
    private updatePageLinks();
    /**
     * Checks that the instance.currentPage property is within bounds for the current page range.
     * If not, return a correct value for currentPage, or the current value if OK.
     */
    private outOfBoundCorrection(instance);
    /**
     * Returns an array of Page objects to use in the pagination controls.
     */
    private createPageArray(currentPage, itemsPerPage, totalItems, paginationRange);
    /**
     * Given the position in the sequence of pagination links [i],
     * figure out what page number corresponds to that position.
     */
    private calculatePageNumber(i, currentPage, paginationRange, totalPages);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PaginationControlsDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PaginationControlsDirective, "pagination-template,[pagination-template]", ["paginationApi"], { "maxSize": "maxSize"; "id": "id"; }, { "pageChange": "pageChange"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5hdGlvbi1jb250cm9scy5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsicGFnaW5hdGlvbi1jb250cm9scy5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQYWdpbmF0aW9uU2VydmljZSB9IGZyb20gJy4vcGFnaW5hdGlvbi5zZXJ2aWNlJztcclxuZXhwb3J0IGludGVyZmFjZSBQYWdlIHtcclxuICAgIGxhYmVsOiBzdHJpbmc7XHJcbiAgICB2YWx1ZTogYW55O1xyXG59XHJcbi8qKlxyXG4gKiBUaGlzIGRpcmVjdGl2ZSBpcyB3aGF0IHBvd2VycyBhbGwgcGFnaW5hdGlvbiBjb250cm9scyBjb21wb25lbnRzLCBpbmNsdWRpbmcgdGhlIGRlZmF1bHQgb25lLlxyXG4gKiBJdCBleHBvc2VzIGFuIEFQSSB3aGljaCBpcyBob29rZWQgdXAgdG8gdGhlIFBhZ2luYXRpb25TZXJ2aWNlIHRvIGtlZXAgdGhlIFBhZ2luYXRlUGlwZSBpbiBzeW5jXHJcbiAqIHdpdGggdGhlIHBhZ2luYXRpb24gY29udHJvbHMuXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQYWdpbmF0aW9uQ29udHJvbHNEaXJlY3RpdmUge1xyXG4gICAgcHJpdmF0ZSBzZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvclJlZjtcclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICBtYXhTaXplOiBudW1iZXI7XHJcbiAgICBwYWdlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8bnVtYmVyPjtcclxuICAgIHBhZ2VzOiBQYWdlW107XHJcbiAgICBwcml2YXRlIGNoYW5nZVN1YjtcclxuICAgIGNvbnN0cnVjdG9yKHNlcnZpY2U6IFBhZ2luYXRpb25TZXJ2aWNlLCBjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYpO1xyXG4gICAgbmdPbkluaXQoKTogdm9pZDtcclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IGFueSk6IHZvaWQ7XHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBHbyB0byB0aGUgcHJldmlvdXMgcGFnZVxyXG4gICAgICovXHJcbiAgICBwcmV2aW91cygpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBHbyB0byB0aGUgbmV4dCBwYWdlXHJcbiAgICAgKi9cclxuICAgIG5leHQoKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0cnVlIGlmIGN1cnJlbnQgcGFnZSBpcyBmaXJzdCBwYWdlXHJcbiAgICAgKi9cclxuICAgIGlzRmlyc3RQYWdlKCk6IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiBjdXJyZW50IHBhZ2UgaXMgbGFzdCBwYWdlXHJcbiAgICAgKi9cclxuICAgIGlzTGFzdFBhZ2UoKTogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogU2V0IHRoZSBjdXJyZW50IHBhZ2UgbnVtYmVyLlxyXG4gICAgICovXHJcbiAgICBzZXRDdXJyZW50KHBhZ2U6IG51bWJlcik6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIEdldCB0aGUgY3VycmVudCBwYWdlIG51bWJlci5cclxuICAgICAqL1xyXG4gICAgZ2V0Q3VycmVudCgpOiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIGxhc3QgcGFnZSBudW1iZXJcclxuICAgICAqL1xyXG4gICAgZ2V0TGFzdFBhZ2UoKTogbnVtYmVyO1xyXG4gICAgZ2V0VG90YWxJdGVtcygpOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIGNoZWNrVmFsaWRJZCgpO1xyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGVzIHRoZSBwYWdlIGxpbmtzIGFuZCBjaGVja3MgdGhhdCB0aGUgY3VycmVudCBwYWdlIGlzIHZhbGlkLiBTaG91bGQgcnVuIHdoZW5ldmVyIHRoZVxyXG4gICAgICogUGFnaW5hdGlvblNlcnZpY2UuY2hhbmdlIHN0cmVhbSBlbWl0cyBhIHZhbHVlIG1hdGNoaW5nIHRoZSBjdXJyZW50IElELCBvciB3aGVuIGFueSBvZiB0aGVcclxuICAgICAqIGlucHV0IHZhbHVlcyBjaGFuZ2VzLlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHVwZGF0ZVBhZ2VMaW5rcygpO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVja3MgdGhhdCB0aGUgaW5zdGFuY2UuY3VycmVudFBhZ2UgcHJvcGVydHkgaXMgd2l0aGluIGJvdW5kcyBmb3IgdGhlIGN1cnJlbnQgcGFnZSByYW5nZS5cclxuICAgICAqIElmIG5vdCwgcmV0dXJuIGEgY29ycmVjdCB2YWx1ZSBmb3IgY3VycmVudFBhZ2UsIG9yIHRoZSBjdXJyZW50IHZhbHVlIGlmIE9LLlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIG91dE9mQm91bmRDb3JyZWN0aW9uKGluc3RhbmNlKTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhbiBhcnJheSBvZiBQYWdlIG9iamVjdHMgdG8gdXNlIGluIHRoZSBwYWdpbmF0aW9uIGNvbnRyb2xzLlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGNyZWF0ZVBhZ2VBcnJheShjdXJyZW50UGFnZSwgaXRlbXNQZXJQYWdlLCB0b3RhbEl0ZW1zLCBwYWdpbmF0aW9uUmFuZ2UpO1xyXG4gICAgLyoqXHJcbiAgICAgKiBHaXZlbiB0aGUgcG9zaXRpb24gaW4gdGhlIHNlcXVlbmNlIG9mIHBhZ2luYXRpb24gbGlua3MgW2ldLFxyXG4gICAgICogZmlndXJlIG91dCB3aGF0IHBhZ2UgbnVtYmVyIGNvcnJlc3BvbmRzIHRvIHRoYXQgcG9zaXRpb24uXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgY2FsY3VsYXRlUGFnZU51bWJlcihpLCBjdXJyZW50UGFnZSwgcGFnaW5hdGlvblJhbmdlLCB0b3RhbFBhZ2VzKTtcclxufVxyXG4iXX0=