import { AfterViewInit, DoCheck, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { EChartOption, ECharts } from 'echarts';
import * as ɵngcc0 from '@angular/core';
export declare class NgxEchartsDirective implements OnChanges, OnDestroy, OnInit, DoCheck, AfterViewInit {
    private el;
    private ngZone;
    options: EChartOption;
    theme: string;
    loading: boolean;
    initOpts: {
        devicePixelRatio?: number;
        renderer?: string;
        width?: number | string;
        height?: number | string;
    };
    merge: EChartOption;
    autoResize: boolean;
    loadingType: string;
    loadingOpts: object;
    detectEventChanges: boolean;
    chartInit: EventEmitter<ECharts>;
    chartClick: EventEmitter<{}>;
    chartDblClick: EventEmitter<{}>;
    chartMouseDown: EventEmitter<{}>;
    chartMouseMove: EventEmitter<{}>;
    chartMouseUp: EventEmitter<{}>;
    chartMouseOver: EventEmitter<{}>;
    chartMouseOut: EventEmitter<{}>;
    chartGlobalOut: EventEmitter<{}>;
    chartContextMenu: EventEmitter<{}>;
    chartLegendSelectChanged: EventEmitter<{}>;
    chartLegendSelected: EventEmitter<{}>;
    chartLegendUnselected: EventEmitter<{}>;
    chartLegendScroll: EventEmitter<{}>;
    chartDataZoom: EventEmitter<{}>;
    chartDataRangeSelected: EventEmitter<{}>;
    chartTimelineChanged: EventEmitter<{}>;
    chartTimelinePlayChanged: EventEmitter<{}>;
    chartRestore: EventEmitter<{}>;
    chartDataViewChanged: EventEmitter<{}>;
    chartMagicTypeChanged: EventEmitter<{}>;
    chartPieSelectChanged: EventEmitter<{}>;
    chartPieSelected: EventEmitter<{}>;
    chartPieUnselected: EventEmitter<{}>;
    chartMapSelectChanged: EventEmitter<{}>;
    chartMapSelected: EventEmitter<{}>;
    chartMapUnselected: EventEmitter<{}>;
    chartAxisAreaSelected: EventEmitter<{}>;
    chartFocusNodeAdjacency: EventEmitter<{}>;
    chartUnfocusNodeAdjacency: EventEmitter<{}>;
    chartBrush: EventEmitter<{}>;
    chartBrushSelected: EventEmitter<{}>;
    chartRendered: EventEmitter<{}>;
    chartFinished: EventEmitter<{}>;
    private chart;
    private currentOffsetWidth;
    private currentOffsetHeight;
    private currentWindowWidth;
    private resizeSub;
    constructor(el: ElementRef, ngZone: NgZone);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngDoCheck(): void;
    ngAfterViewInit(): void;
    private dispose;
    private resize;
    private toggleLoading;
    private setOption;
    private refreshChart;
    private createChart;
    private initChart;
    private onOptionsChange;
    private createLazyEvent;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxEchartsDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NgxEchartsDirective, "echarts, [echarts]", never, { "autoResize": "autoResize"; "loadingType": "loadingType"; "detectEventChanges": "detectEventChanges"; "options": "options"; "theme": "theme"; "loading": "loading"; "initOpts": "initOpts"; "merge": "merge"; "loadingOpts": "loadingOpts"; }, { "chartInit": "chartInit"; "chartClick": "chartClick"; "chartDblClick": "chartDblClick"; "chartMouseDown": "chartMouseDown"; "chartMouseMove": "chartMouseMove"; "chartMouseUp": "chartMouseUp"; "chartMouseOver": "chartMouseOver"; "chartMouseOut": "chartMouseOut"; "chartGlobalOut": "chartGlobalOut"; "chartContextMenu": "chartContextMenu"; "chartLegendSelectChanged": "chartLegendSelectChanged"; "chartLegendSelected": "chartLegendSelected"; "chartLegendUnselected": "chartLegendUnselected"; "chartLegendScroll": "chartLegendScroll"; "chartDataZoom": "chartDataZoom"; "chartDataRangeSelected": "chartDataRangeSelected"; "chartTimelineChanged": "chartTimelineChanged"; "chartTimelinePlayChanged": "chartTimelinePlayChanged"; "chartRestore": "chartRestore"; "chartDataViewChanged": "chartDataViewChanged"; "chartMagicTypeChanged": "chartMagicTypeChanged"; "chartPieSelectChanged": "chartPieSelectChanged"; "chartPieSelected": "chartPieSelected"; "chartPieUnselected": "chartPieUnselected"; "chartMapSelectChanged": "chartMapSelectChanged"; "chartMapSelected": "chartMapSelected"; "chartMapUnselected": "chartMapUnselected"; "chartAxisAreaSelected": "chartAxisAreaSelected"; "chartFocusNodeAdjacency": "chartFocusNodeAdjacency"; "chartUnfocusNodeAdjacency": "chartUnfocusNodeAdjacency"; "chartBrush": "chartBrush"; "chartBrushSelected": "chartBrushSelected"; "chartRendered": "chartRendered"; "chartFinished": "chartFinished"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWVjaGFydHMuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbIm5neC1lY2hhcnRzLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBEb0NoZWNrLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE5nWm9uZSwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRUNoYXJ0T3B0aW9uLCBFQ2hhcnRzIH0gZnJvbSAnZWNoYXJ0cyc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOZ3hFY2hhcnRzRGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCwgRG9DaGVjaywgQWZ0ZXJWaWV3SW5pdCB7XG4gICAgcHJpdmF0ZSBlbDtcbiAgICBwcml2YXRlIG5nWm9uZTtcbiAgICBvcHRpb25zOiBFQ2hhcnRPcHRpb247XG4gICAgdGhlbWU6IHN0cmluZztcbiAgICBsb2FkaW5nOiBib29sZWFuO1xuICAgIGluaXRPcHRzOiB7XG4gICAgICAgIGRldmljZVBpeGVsUmF0aW8/OiBudW1iZXI7XG4gICAgICAgIHJlbmRlcmVyPzogc3RyaW5nO1xuICAgICAgICB3aWR0aD86IG51bWJlciB8IHN0cmluZztcbiAgICAgICAgaGVpZ2h0PzogbnVtYmVyIHwgc3RyaW5nO1xuICAgIH07XG4gICAgbWVyZ2U6IEVDaGFydE9wdGlvbjtcbiAgICBhdXRvUmVzaXplOiBib29sZWFuO1xuICAgIGxvYWRpbmdUeXBlOiBzdHJpbmc7XG4gICAgbG9hZGluZ09wdHM6IG9iamVjdDtcbiAgICBkZXRlY3RFdmVudENoYW5nZXM6IGJvb2xlYW47XG4gICAgY2hhcnRJbml0OiBFdmVudEVtaXR0ZXI8RUNoYXJ0cz47XG4gICAgY2hhcnRDbGljazogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBjaGFydERibENsaWNrOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGNoYXJ0TW91c2VEb3duOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGNoYXJ0TW91c2VNb3ZlOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGNoYXJ0TW91c2VVcDogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBjaGFydE1vdXNlT3ZlcjogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBjaGFydE1vdXNlT3V0OiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGNoYXJ0R2xvYmFsT3V0OiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGNoYXJ0Q29udGV4dE1lbnU6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgY2hhcnRMZWdlbmRTZWxlY3RDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGNoYXJ0TGVnZW5kU2VsZWN0ZWQ6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgY2hhcnRMZWdlbmRVbnNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGNoYXJ0TGVnZW5kU2Nyb2xsOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGNoYXJ0RGF0YVpvb206IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgY2hhcnREYXRhUmFuZ2VTZWxlY3RlZDogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBjaGFydFRpbWVsaW5lQ2hhbmdlZDogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBjaGFydFRpbWVsaW5lUGxheUNoYW5nZWQ6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgY2hhcnRSZXN0b3JlOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGNoYXJ0RGF0YVZpZXdDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGNoYXJ0TWFnaWNUeXBlQ2hhbmdlZDogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBjaGFydFBpZVNlbGVjdENoYW5nZWQ6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgY2hhcnRQaWVTZWxlY3RlZDogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBjaGFydFBpZVVuc2VsZWN0ZWQ6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgY2hhcnRNYXBTZWxlY3RDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGNoYXJ0TWFwU2VsZWN0ZWQ6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgY2hhcnRNYXBVbnNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGNoYXJ0QXhpc0FyZWFTZWxlY3RlZDogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBjaGFydEZvY3VzTm9kZUFkamFjZW5jeTogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBjaGFydFVuZm9jdXNOb2RlQWRqYWNlbmN5OiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGNoYXJ0QnJ1c2g6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgY2hhcnRCcnVzaFNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGNoYXJ0UmVuZGVyZWQ6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgY2hhcnRGaW5pc2hlZDogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBwcml2YXRlIGNoYXJ0O1xuICAgIHByaXZhdGUgY3VycmVudE9mZnNldFdpZHRoO1xuICAgIHByaXZhdGUgY3VycmVudE9mZnNldEhlaWdodDtcbiAgICBwcml2YXRlIGN1cnJlbnRXaW5kb3dXaWR0aDtcbiAgICBwcml2YXRlIHJlc2l6ZVN1YjtcbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZiwgbmdab25lOiBOZ1pvbmUpO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBuZ0RvQ2hlY2soKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBwcml2YXRlIGRpc3Bvc2U7XG4gICAgcHJpdmF0ZSByZXNpemU7XG4gICAgcHJpdmF0ZSB0b2dnbGVMb2FkaW5nO1xuICAgIHByaXZhdGUgc2V0T3B0aW9uO1xuICAgIHByaXZhdGUgcmVmcmVzaENoYXJ0O1xuICAgIHByaXZhdGUgY3JlYXRlQ2hhcnQ7XG4gICAgcHJpdmF0ZSBpbml0Q2hhcnQ7XG4gICAgcHJpdmF0ZSBvbk9wdGlvbnNDaGFuZ2U7XG4gICAgcHJpdmF0ZSBjcmVhdGVMYXp5RXZlbnQ7XG59XG4iXX0=