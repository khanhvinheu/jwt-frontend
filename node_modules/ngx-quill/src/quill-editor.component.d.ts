import { DomSanitizer } from '@angular/platform-browser';
import { QuillConfig, QuillModules } from './quill-editor.interfaces';
import { AfterViewInit, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, Renderer2, SimpleChanges } from '@angular/core';
import { ControlValueAccessor, Validator } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
export interface CustomOption {
    import: string;
    whitelist: any[];
}
export interface Range {
    index: number;
    length: number;
}
export declare class QuillEditorComponent implements AfterViewInit, ControlValueAccessor, OnChanges, OnDestroy, Validator {
    private elementRef;
    private domSanitizer;
    private doc;
    private platformId;
    private renderer;
    private zone;
    private config;
    quillEditor: any;
    editorElem: HTMLElement | undefined;
    content: any;
    format?: 'object' | 'html' | 'text' | 'json';
    theme?: string;
    modules?: QuillModules;
    debug?: 'warn' | 'log' | 'error' | false;
    readOnly?: boolean;
    placeholder?: string;
    maxLength?: number;
    minLength?: number;
    required: boolean;
    formats?: string[] | null;
    customToolbarPosition: 'top' | 'bottom';
    sanitize: boolean;
    style: any;
    strict: boolean;
    scrollingContainer?: HTMLElement | string | null;
    bounds?: HTMLElement | string;
    customOptions: CustomOption[];
    trackChanges?: 'user' | 'all';
    preserveWhitespace: boolean;
    onEditorCreated: EventEmitter<any>;
    onContentChanged: EventEmitter<{
        content: any;
        delta: any;
        editor: any;
        html: string | null;
        oldDelta: any;
        source: string;
        text: string;
    }>;
    onSelectionChanged: EventEmitter<{
        editor: any;
        oldRange: Range | null;
        range: Range | null;
        source: string;
    }>;
    onFocus: EventEmitter<{
        editor: any;
        source: string;
    }>;
    onBlur: EventEmitter<{
        editor: any;
        source: string;
    }>;
    private disabled;
    constructor(elementRef: ElementRef, domSanitizer: DomSanitizer, doc: any, platformId: Object, renderer: Renderer2, zone: NgZone, config: QuillConfig);
    onModelChange(_modelValue?: any): void;
    onModelTouched(): void;
    valueGetter: (quillEditor: any, editorElement: HTMLElement) => any;
    valueSetter: (quillEditor: any, value: any) => any;
    ngAfterViewInit(): void;
    selectionChangeHandler: (range: Range, oldRange: Range, source: string) => void;
    textChangeHandler: (delta: any, oldDelta: any, source: string) => void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    writeValue(currentValue: any): void;
    setDisabledState(isDisabled?: boolean): void;
    registerOnChange(fn: (modelValue: any) => void): void;
    registerOnTouched(fn: () => void): void;
    validate(): {
        minLengthError?: {
            given: number;
            minLength: number;
        };
        maxLengthError?: {
            given: number;
            maxLength: number;
        };
        requiredError?: {
            empty: boolean;
        };
    };
    static ɵfac: ɵngcc0.ɵɵFactoryDef<QuillEditorComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<QuillEditorComponent, "quill-editor", never, { "format": "format"; "required": "required"; "customToolbarPosition": "customToolbarPosition"; "sanitize": "sanitize"; "style": "style"; "strict": "strict"; "customOptions": "customOptions"; "preserveWhitespace": "preserveWhitespace"; "valueGetter": "valueGetter"; "valueSetter": "valueSetter"; "theme": "theme"; "modules": "modules"; "debug": "debug"; "readOnly": "readOnly"; "placeholder": "placeholder"; "maxLength": "maxLength"; "minLength": "minLength"; "formats": "formats"; "scrollingContainer": "scrollingContainer"; "bounds": "bounds"; "trackChanges": "trackChanges"; }, { "onEditorCreated": "onEditorCreated"; "onContentChanged": "onContentChanged"; "onSelectionChanged": "onSelectionChanged"; "onFocus": "onFocus"; "onBlur": "onBlur"; }, never, ["[quill-editor-toolbar]"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVpbGwtZWRpdG9yLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJxdWlsbC1lZGl0b3IuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERvbVNhbml0aXplciB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgUXVpbGxDb25maWcsIFF1aWxsTW9kdWxlcyB9IGZyb20gJy4vcXVpbGwtZWRpdG9yLmludGVyZmFjZXMnO1xuaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBOZ1pvbmUsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBSZW5kZXJlcjIsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBWYWxpZGF0b3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5leHBvcnQgaW50ZXJmYWNlIEN1c3RvbU9wdGlvbiB7XG4gICAgaW1wb3J0OiBzdHJpbmc7XG4gICAgd2hpdGVsaXN0OiBhbnlbXTtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgUmFuZ2Uge1xuICAgIGluZGV4OiBudW1iZXI7XG4gICAgbGVuZ3RoOiBudW1iZXI7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBRdWlsbEVkaXRvckNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgVmFsaWRhdG9yIHtcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY7XG4gICAgcHJpdmF0ZSBkb21TYW5pdGl6ZXI7XG4gICAgcHJpdmF0ZSBkb2M7XG4gICAgcHJpdmF0ZSBwbGF0Zm9ybUlkO1xuICAgIHByaXZhdGUgcmVuZGVyZXI7XG4gICAgcHJpdmF0ZSB6b25lO1xuICAgIHByaXZhdGUgY29uZmlnO1xuICAgIHF1aWxsRWRpdG9yOiBhbnk7XG4gICAgZWRpdG9yRWxlbTogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQ7XG4gICAgY29udGVudDogYW55O1xuICAgIGZvcm1hdD86ICdvYmplY3QnIHwgJ2h0bWwnIHwgJ3RleHQnIHwgJ2pzb24nO1xuICAgIHRoZW1lPzogc3RyaW5nO1xuICAgIG1vZHVsZXM/OiBRdWlsbE1vZHVsZXM7XG4gICAgZGVidWc/OiAnd2FybicgfCAnbG9nJyB8ICdlcnJvcicgfCBmYWxzZTtcbiAgICByZWFkT25seT86IGJvb2xlYW47XG4gICAgcGxhY2Vob2xkZXI/OiBzdHJpbmc7XG4gICAgbWF4TGVuZ3RoPzogbnVtYmVyO1xuICAgIG1pbkxlbmd0aD86IG51bWJlcjtcbiAgICByZXF1aXJlZDogYm9vbGVhbjtcbiAgICBmb3JtYXRzPzogc3RyaW5nW10gfCBudWxsO1xuICAgIGN1c3RvbVRvb2xiYXJQb3NpdGlvbjogJ3RvcCcgfCAnYm90dG9tJztcbiAgICBzYW5pdGl6ZTogYm9vbGVhbjtcbiAgICBzdHlsZTogYW55O1xuICAgIHN0cmljdDogYm9vbGVhbjtcbiAgICBzY3JvbGxpbmdDb250YWluZXI/OiBIVE1MRWxlbWVudCB8IHN0cmluZyB8IG51bGw7XG4gICAgYm91bmRzPzogSFRNTEVsZW1lbnQgfCBzdHJpbmc7XG4gICAgY3VzdG9tT3B0aW9uczogQ3VzdG9tT3B0aW9uW107XG4gICAgdHJhY2tDaGFuZ2VzPzogJ3VzZXInIHwgJ2FsbCc7XG4gICAgcHJlc2VydmVXaGl0ZXNwYWNlOiBib29sZWFuO1xuICAgIG9uRWRpdG9yQ3JlYXRlZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25Db250ZW50Q2hhbmdlZDogRXZlbnRFbWl0dGVyPHtcbiAgICAgICAgY29udGVudDogYW55O1xuICAgICAgICBkZWx0YTogYW55O1xuICAgICAgICBlZGl0b3I6IGFueTtcbiAgICAgICAgaHRtbDogc3RyaW5nIHwgbnVsbDtcbiAgICAgICAgb2xkRGVsdGE6IGFueTtcbiAgICAgICAgc291cmNlOiBzdHJpbmc7XG4gICAgICAgIHRleHQ6IHN0cmluZztcbiAgICB9PjtcbiAgICBvblNlbGVjdGlvbkNoYW5nZWQ6IEV2ZW50RW1pdHRlcjx7XG4gICAgICAgIGVkaXRvcjogYW55O1xuICAgICAgICBvbGRSYW5nZTogUmFuZ2UgfCBudWxsO1xuICAgICAgICByYW5nZTogUmFuZ2UgfCBudWxsO1xuICAgICAgICBzb3VyY2U6IHN0cmluZztcbiAgICB9PjtcbiAgICBvbkZvY3VzOiBFdmVudEVtaXR0ZXI8e1xuICAgICAgICBlZGl0b3I6IGFueTtcbiAgICAgICAgc291cmNlOiBzdHJpbmc7XG4gICAgfT47XG4gICAgb25CbHVyOiBFdmVudEVtaXR0ZXI8e1xuICAgICAgICBlZGl0b3I6IGFueTtcbiAgICAgICAgc291cmNlOiBzdHJpbmc7XG4gICAgfT47XG4gICAgcHJpdmF0ZSBkaXNhYmxlZDtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBkb21TYW5pdGl6ZXI6IERvbVNhbml0aXplciwgZG9jOiBhbnksIHBsYXRmb3JtSWQ6IE9iamVjdCwgcmVuZGVyZXI6IFJlbmRlcmVyMiwgem9uZTogTmdab25lLCBjb25maWc6IFF1aWxsQ29uZmlnKTtcbiAgICBvbk1vZGVsQ2hhbmdlKF9tb2RlbFZhbHVlPzogYW55KTogdm9pZDtcbiAgICBvbk1vZGVsVG91Y2hlZCgpOiB2b2lkO1xuICAgIHZhbHVlR2V0dGVyOiAocXVpbGxFZGl0b3I6IGFueSwgZWRpdG9yRWxlbWVudDogSFRNTEVsZW1lbnQpID0+IGFueTtcbiAgICB2YWx1ZVNldHRlcjogKHF1aWxsRWRpdG9yOiBhbnksIHZhbHVlOiBhbnkpID0+IGFueTtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBzZWxlY3Rpb25DaGFuZ2VIYW5kbGVyOiAocmFuZ2U6IFJhbmdlLCBvbGRSYW5nZTogUmFuZ2UsIHNvdXJjZTogc3RyaW5nKSA9PiB2b2lkO1xuICAgIHRleHRDaGFuZ2VIYW5kbGVyOiAoZGVsdGE6IGFueSwgb2xkRGVsdGE6IGFueSwgc291cmNlOiBzdHJpbmcpID0+IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICB3cml0ZVZhbHVlKGN1cnJlbnRWYWx1ZTogYW55KTogdm9pZDtcbiAgICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ/OiBib29sZWFuKTogdm9pZDtcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiAobW9kZWxWYWx1ZTogYW55KSA9PiB2b2lkKTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogKCkgPT4gdm9pZCk6IHZvaWQ7XG4gICAgdmFsaWRhdGUoKToge1xuICAgICAgICBtaW5MZW5ndGhFcnJvcj86IHtcbiAgICAgICAgICAgIGdpdmVuOiBudW1iZXI7XG4gICAgICAgICAgICBtaW5MZW5ndGg6IG51bWJlcjtcbiAgICAgICAgfTtcbiAgICAgICAgbWF4TGVuZ3RoRXJyb3I/OiB7XG4gICAgICAgICAgICBnaXZlbjogbnVtYmVyO1xuICAgICAgICAgICAgbWF4TGVuZ3RoOiBudW1iZXI7XG4gICAgICAgIH07XG4gICAgICAgIHJlcXVpcmVkRXJyb3I/OiB7XG4gICAgICAgICAgICBlbXB0eTogYm9vbGVhbjtcbiAgICAgICAgfTtcbiAgICB9O1xufVxuIl19