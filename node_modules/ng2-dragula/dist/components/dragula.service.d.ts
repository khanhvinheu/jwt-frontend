import { Group } from '../Group';
import { DragulaOptions } from '../DragulaOptions';
import { Observable } from 'rxjs';
import { DrakeFactory } from '../DrakeFactory';
import * as ɵngcc0 from '@angular/core';
export declare class DragulaService {
    private drakeFactory;
    private dispatch$;
    drag: (groupName?: string) => Observable<{
        name: string;
        el: Element;
        source: Element;
    }>;
    dragend: (groupName?: string) => Observable<{
        name: string;
        el: Element;
    }>;
    drop: (groupName?: string) => Observable<{
        name: string;
        el: Element;
        target: Element;
        source: Element;
        sibling: Element;
    }>;
    private elContainerSource;
    cancel: (groupName?: string) => Observable<{
        name: string;
        el: Element;
        container: Element;
        source: Element;
    }>;
    remove: (groupName?: string) => Observable<{
        name: string;
        el: Element;
        container: Element;
        source: Element;
    }>;
    shadow: (groupName?: string) => Observable<{
        name: string;
        el: Element;
        container: Element;
        source: Element;
    }>;
    over: (groupName?: string) => Observable<{
        name: string;
        el: Element;
        container: Element;
        source: Element;
    }>;
    out: (groupName?: string) => Observable<{
        name: string;
        el: Element;
        container: Element;
        source: Element;
    }>;
    cloned: (groupName?: string) => Observable<{
        name: string;
        clone: Element;
        original: Element;
        cloneType: "mirror" | "copy";
    }>;
    dropModel: <T = any>(groupName?: string) => Observable<{
        name: string;
        el: Element;
        target: Element;
        source: Element;
        sibling: Element;
        item: T;
        sourceModel: T[];
        targetModel: T[];
        sourceIndex: number;
        targetIndex: number;
    }>;
    removeModel: <T = any>(groupName?: string) => Observable<{
        name: string;
        el: Element;
        container: Element;
        source: Element;
        item: T;
        sourceModel: T[];
        sourceIndex: number;
    }>;
    private groups;
    constructor(drakeFactory?: DrakeFactory);
    /** Public mainly for testing purposes. Prefer `createGroup()`. */
    add(group: Group): Group;
    find(name: string): Group;
    destroy(name: string): void;
    /**
     * Creates a group with the specified name and options.
     *
     * Note: formerly known as `setOptions`
     */
    createGroup<T = any>(name: string, options: DragulaOptions<T>): Group;
    private handleModels({name, drake, options});
    private setupEvents(group);
    private domIndexOf(child, parent);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DragulaService, [{ optional: true; }]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<DragulaService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZ3VsYS5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbImRyYWd1bGEuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR3JvdXAgfSBmcm9tICcuLi9Hcm91cCc7XG5pbXBvcnQgeyBEcmFndWxhT3B0aW9ucyB9IGZyb20gJy4uL0RyYWd1bGFPcHRpb25zJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IERyYWtlRmFjdG9yeSB9IGZyb20gJy4uL0RyYWtlRmFjdG9yeSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBEcmFndWxhU2VydmljZSB7XG4gICAgcHJpdmF0ZSBkcmFrZUZhY3Rvcnk7XG4gICAgcHJpdmF0ZSBkaXNwYXRjaCQ7XG4gICAgZHJhZzogKGdyb3VwTmFtZT86IHN0cmluZykgPT4gT2JzZXJ2YWJsZTx7XG4gICAgICAgIG5hbWU6IHN0cmluZztcbiAgICAgICAgZWw6IEVsZW1lbnQ7XG4gICAgICAgIHNvdXJjZTogRWxlbWVudDtcbiAgICB9PjtcbiAgICBkcmFnZW5kOiAoZ3JvdXBOYW1lPzogc3RyaW5nKSA9PiBPYnNlcnZhYmxlPHtcbiAgICAgICAgbmFtZTogc3RyaW5nO1xuICAgICAgICBlbDogRWxlbWVudDtcbiAgICB9PjtcbiAgICBkcm9wOiAoZ3JvdXBOYW1lPzogc3RyaW5nKSA9PiBPYnNlcnZhYmxlPHtcbiAgICAgICAgbmFtZTogc3RyaW5nO1xuICAgICAgICBlbDogRWxlbWVudDtcbiAgICAgICAgdGFyZ2V0OiBFbGVtZW50O1xuICAgICAgICBzb3VyY2U6IEVsZW1lbnQ7XG4gICAgICAgIHNpYmxpbmc6IEVsZW1lbnQ7XG4gICAgfT47XG4gICAgcHJpdmF0ZSBlbENvbnRhaW5lclNvdXJjZTtcbiAgICBjYW5jZWw6IChncm91cE5hbWU/OiBzdHJpbmcpID0+IE9ic2VydmFibGU8e1xuICAgICAgICBuYW1lOiBzdHJpbmc7XG4gICAgICAgIGVsOiBFbGVtZW50O1xuICAgICAgICBjb250YWluZXI6IEVsZW1lbnQ7XG4gICAgICAgIHNvdXJjZTogRWxlbWVudDtcbiAgICB9PjtcbiAgICByZW1vdmU6IChncm91cE5hbWU/OiBzdHJpbmcpID0+IE9ic2VydmFibGU8e1xuICAgICAgICBuYW1lOiBzdHJpbmc7XG4gICAgICAgIGVsOiBFbGVtZW50O1xuICAgICAgICBjb250YWluZXI6IEVsZW1lbnQ7XG4gICAgICAgIHNvdXJjZTogRWxlbWVudDtcbiAgICB9PjtcbiAgICBzaGFkb3c6IChncm91cE5hbWU/OiBzdHJpbmcpID0+IE9ic2VydmFibGU8e1xuICAgICAgICBuYW1lOiBzdHJpbmc7XG4gICAgICAgIGVsOiBFbGVtZW50O1xuICAgICAgICBjb250YWluZXI6IEVsZW1lbnQ7XG4gICAgICAgIHNvdXJjZTogRWxlbWVudDtcbiAgICB9PjtcbiAgICBvdmVyOiAoZ3JvdXBOYW1lPzogc3RyaW5nKSA9PiBPYnNlcnZhYmxlPHtcbiAgICAgICAgbmFtZTogc3RyaW5nO1xuICAgICAgICBlbDogRWxlbWVudDtcbiAgICAgICAgY29udGFpbmVyOiBFbGVtZW50O1xuICAgICAgICBzb3VyY2U6IEVsZW1lbnQ7XG4gICAgfT47XG4gICAgb3V0OiAoZ3JvdXBOYW1lPzogc3RyaW5nKSA9PiBPYnNlcnZhYmxlPHtcbiAgICAgICAgbmFtZTogc3RyaW5nO1xuICAgICAgICBlbDogRWxlbWVudDtcbiAgICAgICAgY29udGFpbmVyOiBFbGVtZW50O1xuICAgICAgICBzb3VyY2U6IEVsZW1lbnQ7XG4gICAgfT47XG4gICAgY2xvbmVkOiAoZ3JvdXBOYW1lPzogc3RyaW5nKSA9PiBPYnNlcnZhYmxlPHtcbiAgICAgICAgbmFtZTogc3RyaW5nO1xuICAgICAgICBjbG9uZTogRWxlbWVudDtcbiAgICAgICAgb3JpZ2luYWw6IEVsZW1lbnQ7XG4gICAgICAgIGNsb25lVHlwZTogXCJtaXJyb3JcIiB8IFwiY29weVwiO1xuICAgIH0+O1xuICAgIGRyb3BNb2RlbDogPFQgPSBhbnk+KGdyb3VwTmFtZT86IHN0cmluZykgPT4gT2JzZXJ2YWJsZTx7XG4gICAgICAgIG5hbWU6IHN0cmluZztcbiAgICAgICAgZWw6IEVsZW1lbnQ7XG4gICAgICAgIHRhcmdldDogRWxlbWVudDtcbiAgICAgICAgc291cmNlOiBFbGVtZW50O1xuICAgICAgICBzaWJsaW5nOiBFbGVtZW50O1xuICAgICAgICBpdGVtOiBUO1xuICAgICAgICBzb3VyY2VNb2RlbDogVFtdO1xuICAgICAgICB0YXJnZXRNb2RlbDogVFtdO1xuICAgICAgICBzb3VyY2VJbmRleDogbnVtYmVyO1xuICAgICAgICB0YXJnZXRJbmRleDogbnVtYmVyO1xuICAgIH0+O1xuICAgIHJlbW92ZU1vZGVsOiA8VCA9IGFueT4oZ3JvdXBOYW1lPzogc3RyaW5nKSA9PiBPYnNlcnZhYmxlPHtcbiAgICAgICAgbmFtZTogc3RyaW5nO1xuICAgICAgICBlbDogRWxlbWVudDtcbiAgICAgICAgY29udGFpbmVyOiBFbGVtZW50O1xuICAgICAgICBzb3VyY2U6IEVsZW1lbnQ7XG4gICAgICAgIGl0ZW06IFQ7XG4gICAgICAgIHNvdXJjZU1vZGVsOiBUW107XG4gICAgICAgIHNvdXJjZUluZGV4OiBudW1iZXI7XG4gICAgfT47XG4gICAgcHJpdmF0ZSBncm91cHM7XG4gICAgY29uc3RydWN0b3IoZHJha2VGYWN0b3J5PzogRHJha2VGYWN0b3J5KTtcbiAgICAvKiogUHVibGljIG1haW5seSBmb3IgdGVzdGluZyBwdXJwb3Nlcy4gUHJlZmVyIGBjcmVhdGVHcm91cCgpYC4gKi9cbiAgICBhZGQoZ3JvdXA6IEdyb3VwKTogR3JvdXA7XG4gICAgZmluZChuYW1lOiBzdHJpbmcpOiBHcm91cDtcbiAgICBkZXN0cm95KG5hbWU6IHN0cmluZyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGdyb3VwIHdpdGggdGhlIHNwZWNpZmllZCBuYW1lIGFuZCBvcHRpb25zLlxuICAgICAqXG4gICAgICogTm90ZTogZm9ybWVybHkga25vd24gYXMgYHNldE9wdGlvbnNgXG4gICAgICovXG4gICAgY3JlYXRlR3JvdXA8VCA9IGFueT4obmFtZTogc3RyaW5nLCBvcHRpb25zOiBEcmFndWxhT3B0aW9uczxUPik6IEdyb3VwO1xuICAgIHByaXZhdGUgaGFuZGxlTW9kZWxzKHtuYW1lLCBkcmFrZSwgb3B0aW9uc30pO1xuICAgIHByaXZhdGUgc2V0dXBFdmVudHMoZ3JvdXApO1xuICAgIHByaXZhdGUgZG9tSW5kZXhPZihjaGlsZCwgcGFyZW50KTtcbn1cbiJdfQ==