import { EventEmitter, InjectionToken } from "@angular/core";
import { Observable } from "rxjs";
import { MissingTranslationHandler } from "./missing-translation-handler";
import { TranslateCompiler } from "./translate.compiler";
import { TranslateLoader } from "./translate.loader";
import { TranslateParser } from "./translate.parser";
import { TranslateStore } from "./translate.store";
import * as ɵngcc0 from '@angular/core';
export declare const USE_STORE: InjectionToken<string>;
export declare const USE_DEFAULT_LANG: InjectionToken<string>;
export interface TranslationChangeEvent {
    translations: any;
    lang: string;
}
export interface LangChangeEvent {
    lang: string;
    translations: any;
}
export interface DefaultLangChangeEvent {
    lang: string;
    translations: any;
}
export declare class TranslateService {
    store: TranslateStore;
    currentLoader: TranslateLoader;
    compiler: TranslateCompiler;
    parser: TranslateParser;
    missingTranslationHandler: MissingTranslationHandler;
    private useDefaultLang;
    private isolate;
    private loadingTranslations;
    private pending;
    private _onTranslationChange;
    private _onLangChange;
    private _onDefaultLangChange;
    private _defaultLang;
    private _currentLang;
    private _langs;
    private _translations;
    private _translationRequests;
    readonly onTranslationChange: EventEmitter<TranslationChangeEvent>;
    readonly onLangChange: EventEmitter<LangChangeEvent>;
    readonly onDefaultLangChange: EventEmitter<DefaultLangChangeEvent>;
    defaultLang: string;
    currentLang: string;
    langs: string[];
    translations: any;
    constructor(store: TranslateStore, currentLoader: TranslateLoader, compiler: TranslateCompiler, parser: TranslateParser, missingTranslationHandler: MissingTranslationHandler, useDefaultLang?: boolean, isolate?: boolean);
    setDefaultLang(lang: string): void;
    getDefaultLang(): string;
    use(lang: string): Observable<any>;
    private retrieveTranslations(lang);
    getTranslation(lang: string): Observable<any>;
    setTranslation(lang: string, translations: Object, shouldMerge?: boolean): void;
    getLangs(): Array<string>;
    addLangs(langs: Array<string>): void;
    private updateLangs();
    getParsedResult(translations: any, key: any, interpolateParams?: Object): any;
    get(key: string | Array<string>, interpolateParams?: Object): Observable<string | any>;
    stream(key: string | Array<string>, interpolateParams?: Object): Observable<string | any>;
    instant(key: string | Array<string>, interpolateParams?: Object): string | any;
    set(key: string, value: string, lang?: string): void;
    private changeLang(lang);
    private changeDefaultLang(lang);
    reloadLang(lang: string): Observable<any>;
    resetLang(lang: string): void;
    getBrowserLang(): string;
    getBrowserCultureLang(): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TranslateService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<TranslateService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRlLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsidHJhbnNsYXRlLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwicnhqc1wiO1xyXG5pbXBvcnQgeyBNaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyIH0gZnJvbSBcIi4vbWlzc2luZy10cmFuc2xhdGlvbi1oYW5kbGVyXCI7XHJcbmltcG9ydCB7IFRyYW5zbGF0ZUNvbXBpbGVyIH0gZnJvbSBcIi4vdHJhbnNsYXRlLmNvbXBpbGVyXCI7XHJcbmltcG9ydCB7IFRyYW5zbGF0ZUxvYWRlciB9IGZyb20gXCIuL3RyYW5zbGF0ZS5sb2FkZXJcIjtcclxuaW1wb3J0IHsgVHJhbnNsYXRlUGFyc2VyIH0gZnJvbSBcIi4vdHJhbnNsYXRlLnBhcnNlclwiO1xyXG5pbXBvcnQgeyBUcmFuc2xhdGVTdG9yZSB9IGZyb20gXCIuL3RyYW5zbGF0ZS5zdG9yZVwiO1xyXG5leHBvcnQgZGVjbGFyZSBjb25zdCBVU0VfU1RPUkU6IEluamVjdGlvblRva2VuPHN0cmluZz47XHJcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IFVTRV9ERUZBVUxUX0xBTkc6IEluamVjdGlvblRva2VuPHN0cmluZz47XHJcbmV4cG9ydCBpbnRlcmZhY2UgVHJhbnNsYXRpb25DaGFuZ2VFdmVudCB7XHJcbiAgICB0cmFuc2xhdGlvbnM6IGFueTtcclxuICAgIGxhbmc6IHN0cmluZztcclxufVxyXG5leHBvcnQgaW50ZXJmYWNlIExhbmdDaGFuZ2VFdmVudCB7XHJcbiAgICBsYW5nOiBzdHJpbmc7XHJcbiAgICB0cmFuc2xhdGlvbnM6IGFueTtcclxufVxyXG5leHBvcnQgaW50ZXJmYWNlIERlZmF1bHRMYW5nQ2hhbmdlRXZlbnQge1xyXG4gICAgbGFuZzogc3RyaW5nO1xyXG4gICAgdHJhbnNsYXRpb25zOiBhbnk7XHJcbn1cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVHJhbnNsYXRlU2VydmljZSB7XHJcbiAgICBzdG9yZTogVHJhbnNsYXRlU3RvcmU7XHJcbiAgICBjdXJyZW50TG9hZGVyOiBUcmFuc2xhdGVMb2FkZXI7XHJcbiAgICBjb21waWxlcjogVHJhbnNsYXRlQ29tcGlsZXI7XHJcbiAgICBwYXJzZXI6IFRyYW5zbGF0ZVBhcnNlcjtcclxuICAgIG1pc3NpbmdUcmFuc2xhdGlvbkhhbmRsZXI6IE1pc3NpbmdUcmFuc2xhdGlvbkhhbmRsZXI7XHJcbiAgICBwcml2YXRlIHVzZURlZmF1bHRMYW5nO1xyXG4gICAgcHJpdmF0ZSBpc29sYXRlO1xyXG4gICAgcHJpdmF0ZSBsb2FkaW5nVHJhbnNsYXRpb25zO1xyXG4gICAgcHJpdmF0ZSBwZW5kaW5nO1xyXG4gICAgcHJpdmF0ZSBfb25UcmFuc2xhdGlvbkNoYW5nZTtcclxuICAgIHByaXZhdGUgX29uTGFuZ0NoYW5nZTtcclxuICAgIHByaXZhdGUgX29uRGVmYXVsdExhbmdDaGFuZ2U7XHJcbiAgICBwcml2YXRlIF9kZWZhdWx0TGFuZztcclxuICAgIHByaXZhdGUgX2N1cnJlbnRMYW5nO1xyXG4gICAgcHJpdmF0ZSBfbGFuZ3M7XHJcbiAgICBwcml2YXRlIF90cmFuc2xhdGlvbnM7XHJcbiAgICBwcml2YXRlIF90cmFuc2xhdGlvblJlcXVlc3RzO1xyXG4gICAgcmVhZG9ubHkgb25UcmFuc2xhdGlvbkNoYW5nZTogRXZlbnRFbWl0dGVyPFRyYW5zbGF0aW9uQ2hhbmdlRXZlbnQ+O1xyXG4gICAgcmVhZG9ubHkgb25MYW5nQ2hhbmdlOiBFdmVudEVtaXR0ZXI8TGFuZ0NoYW5nZUV2ZW50PjtcclxuICAgIHJlYWRvbmx5IG9uRGVmYXVsdExhbmdDaGFuZ2U6IEV2ZW50RW1pdHRlcjxEZWZhdWx0TGFuZ0NoYW5nZUV2ZW50PjtcclxuICAgIGRlZmF1bHRMYW5nOiBzdHJpbmc7XHJcbiAgICBjdXJyZW50TGFuZzogc3RyaW5nO1xyXG4gICAgbGFuZ3M6IHN0cmluZ1tdO1xyXG4gICAgdHJhbnNsYXRpb25zOiBhbnk7XHJcbiAgICBjb25zdHJ1Y3RvcihzdG9yZTogVHJhbnNsYXRlU3RvcmUsIGN1cnJlbnRMb2FkZXI6IFRyYW5zbGF0ZUxvYWRlciwgY29tcGlsZXI6IFRyYW5zbGF0ZUNvbXBpbGVyLCBwYXJzZXI6IFRyYW5zbGF0ZVBhcnNlciwgbWlzc2luZ1RyYW5zbGF0aW9uSGFuZGxlcjogTWlzc2luZ1RyYW5zbGF0aW9uSGFuZGxlciwgdXNlRGVmYXVsdExhbmc/OiBib29sZWFuLCBpc29sYXRlPzogYm9vbGVhbik7XHJcbiAgICBzZXREZWZhdWx0TGFuZyhsYW5nOiBzdHJpbmcpOiB2b2lkO1xyXG4gICAgZ2V0RGVmYXVsdExhbmcoKTogc3RyaW5nO1xyXG4gICAgdXNlKGxhbmc6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PjtcclxuICAgIHByaXZhdGUgcmV0cmlldmVUcmFuc2xhdGlvbnMobGFuZyk7XHJcbiAgICBnZXRUcmFuc2xhdGlvbihsYW5nOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT47XHJcbiAgICBzZXRUcmFuc2xhdGlvbihsYW5nOiBzdHJpbmcsIHRyYW5zbGF0aW9uczogT2JqZWN0LCBzaG91bGRNZXJnZT86IGJvb2xlYW4pOiB2b2lkO1xyXG4gICAgZ2V0TGFuZ3MoKTogQXJyYXk8c3RyaW5nPjtcclxuICAgIGFkZExhbmdzKGxhbmdzOiBBcnJheTxzdHJpbmc+KTogdm9pZDtcclxuICAgIHByaXZhdGUgdXBkYXRlTGFuZ3MoKTtcclxuICAgIGdldFBhcnNlZFJlc3VsdCh0cmFuc2xhdGlvbnM6IGFueSwga2V5OiBhbnksIGludGVycG9sYXRlUGFyYW1zPzogT2JqZWN0KTogYW55O1xyXG4gICAgZ2V0KGtleTogc3RyaW5nIHwgQXJyYXk8c3RyaW5nPiwgaW50ZXJwb2xhdGVQYXJhbXM/OiBPYmplY3QpOiBPYnNlcnZhYmxlPHN0cmluZyB8IGFueT47XHJcbiAgICBzdHJlYW0oa2V5OiBzdHJpbmcgfCBBcnJheTxzdHJpbmc+LCBpbnRlcnBvbGF0ZVBhcmFtcz86IE9iamVjdCk6IE9ic2VydmFibGU8c3RyaW5nIHwgYW55PjtcclxuICAgIGluc3RhbnQoa2V5OiBzdHJpbmcgfCBBcnJheTxzdHJpbmc+LCBpbnRlcnBvbGF0ZVBhcmFtcz86IE9iamVjdCk6IHN0cmluZyB8IGFueTtcclxuICAgIHNldChrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZywgbGFuZz86IHN0cmluZyk6IHZvaWQ7XHJcbiAgICBwcml2YXRlIGNoYW5nZUxhbmcobGFuZyk7XHJcbiAgICBwcml2YXRlIGNoYW5nZURlZmF1bHRMYW5nKGxhbmcpO1xyXG4gICAgcmVsb2FkTGFuZyhsYW5nOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT47XHJcbiAgICByZXNldExhbmcobGFuZzogc3RyaW5nKTogdm9pZDtcclxuICAgIGdldEJyb3dzZXJMYW5nKCk6IHN0cmluZztcclxuICAgIGdldEJyb3dzZXJDdWx0dXJlTGFuZygpOiBzdHJpbmc7XHJcbn1cclxuIl19